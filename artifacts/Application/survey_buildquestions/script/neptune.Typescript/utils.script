function setFormBackground(background: string) {
    const setBackground = (value) =>
        document.querySelector<HTMLElement>(":root").style.setProperty("--formBackground", value);

    if (!background) {
        return setBackground("");
    }

    if (background === "bing") {
        return setBackground(`url(https://bing.biturl.top/?resolution=1920&format=image)`);
    }

    setBackground(`url(${background})`);
}

function getTheme() {
    return sap.ui.getCore().getConfiguration().getTheme();
}

const validateMultipleChoice = (validationType, validationParam, response) => {
    const checkedBoxes = Object.values(response).reduce(
        (prev: number, curr) => prev + Number(curr),
        0
    );
    if (!validationParam && !validationType) {
        return { valid: true, checkedBoxes };
    }

    const valLogic = {
        equalTo: (valParam, checked) => +valParam === checked,
        atMost: (valParam, checked) => +valParam >= checked,
        atLeast: (valParam, checked) => +valParam <= checked,
    };

    const output = {
        valid: valLogic[validationType](validationParam, checkedBoxes),
        checkedBoxes,
    };
    return output;
};

const genRelevantResponse = (arr, id) => {
    const relevantResponse = { ...arr };
    Object.keys(relevantResponse).map((key) => {
        if (key.split("_")[0] !== id) {
            delete relevantResponse[key];
        }
    });
    return relevantResponse;
};

function debounce(func, wait, immediate) {
  var timeout;

  return function executedFunction() {
    var context = this;
    var args = arguments;

    var later = function() {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };

    var callNow = immediate && !timeout;

    clearTimeout(timeout);

    timeout = setTimeout(later, wait);

    if (callNow) func.apply(context, args);
  };
};
