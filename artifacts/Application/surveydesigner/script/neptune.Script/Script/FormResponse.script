const formResponse = {
    response: null,
    build: function (responses) {
        formResponse.response = {};

        tabSurveyResponse.setCount(responses.length);

        responses.forEach(function (response) {
            formResponse.flatten(response);
        });

        console.log(formResponse.response);

        formResponse.buildReport();
    },

    buildReport: function () {
        const parent = panResponse;

        parent.destroyContent();

        const surveyHeader = new nep.bootstrap.Alert({
            contextColor: modelSurveyData.oData.setup.headerColor,
        });

        surveyHeader.addContent(
            new nep.bootstrap.Text({
                text: modelSurveyData.oData.name,
                fontSize: "FontSize2",
            })
        );

        if (modelSurveyData.oData.description) {
            surveyHeader.addContent(
                new nep.bootstrap.Text({
                    text: modelSurveyData.oData.description,
                    type: "Paragraph",
                })
            );
        }

        parent.addContent(surveyHeader);

        let qNum = 1;
        modelSurveyData.oData.questions.forEach((question) => {
            const questionTop = new sap.m.Panel({
                expanded: true,
                expandable: true,
            });
            questionTop.addStyleClass("formBorder sapUiMediumMarginTopBottom");

            const questionToolbar = new sap.m.Toolbar({
                width: "100%",
                height: "60px",
            }).addStyleClass("sapUiSizeCompact");

            questionTop.setHeaderToolbar(questionToolbar);

            const questionParent = new sap.m.VBox({
                renderType: sap.m.FlexRendertype.Bare,
            });

            questionToolbar.addContent(
                new nep.bootstrap.Text({
                    text: `${qNum++}. ${question.title}`,
                    textColor: modelSurveyData.oData.setup.textColor,
                    fontSize: "FontSize5",
                    fontWeight: "Bold",
                    textWrapping: true,
                })
            );

            if (question.required) {
                questionToolbar.addContent(
                    new sap.m.Label({
                        required: true,
                    })
                );
            }

            if (question.enableSubtitle) {
                questionParent.addItem(
                    new nep.bootstrap.Text({
                        text: question.subtitle,
                        textColor: modelSurveyData.oData.setup.textColor,
                        fontSize: "FontSize6",
                    })
                );
            }

            // Number of responses
            const response = formResponse.response[question.id];
            if (response) {
                questionParent.addItem(
                    new sap.tnt.InfoLabel({
                        text: response.responseCount + " Responses",
                        width: "150px",
                        colorScheme: 1,
                    }).addStyleClass("sapUiSmallMarginTopBottom")
                );
            }

            questionParent.addItem(new sap.m.VBox({ height: "20px" }));

            questionTop.addContent(questionParent);
            parent.addContent(questionTop);

            switch (question.type) {
                case "Text":
                case "Date":
                case "Numeric":
                    formResponse.buildReportText(question, questionParent);
                    break;

                case "NPS":
                    formResponse.buildReportNPS(question, questionParent);
                    formResponse.buildToolbar(question, questionParent);
                    break;

                case "Likert":
                    formResponse.buildReportLikert(question, questionParent);
                    formResponse.buildToolbar(question, questionParent);
                    break;

                case "MultipleChoice":
                case "SingleChoice":
                    formResponse.buildReportChoice(question, questionParent);
                    formResponse.buildToolbar(question, questionParent);
                    break;

                default:
                    break;
            }
        });
    },

    buildToolbar: function (question, parent) {
        const toolbar = new sap.m.Toolbar({
            width: "100%",
        }).addStyleClass("sapUiSmallMarginTop sapUiSizeCompact formNoBorder formToolbar");

        toolbar.addContent(new sap.m.ToolbarSpacer());

        const chartPolar = new sap.m.CheckBox({
            text: "Spiderweb",
            selected: "{/chartPolar" + question.id + "}",
            select: function (oEvent) {
                formResponse.buildReport();
            },
        });

        toolbar.addContent(chartPolar);

        const chartTypes = new sap.m.Select({
            width: "150px",
            selectedKey: "{/chartType" + question.id + "}",
            change: function (oEvent) {
                formResponse.buildReport();
            },
        });

        switch (question.type) {
            case "NPS":
                chartTypes.addItem(new sap.ui.core.Item({ key: "bar", text: "Bar" }));
                chartTypes.addItem(new sap.ui.core.Item({ key: "column", text: "Column" }));
                break;

            default:
                // chartTypes.addItem(new sap.ui.core.Item({ key: "area", text: "Area" }));
                // chartTypes.addItem(
                //     new sap.ui.core.Item({ key: "areaspline", text: "Area Spline" })
                // );
                chartTypes.addItem(new sap.ui.core.Item({ key: "spline", text: "Spline" }));
                chartTypes.addItem(new sap.ui.core.Item({ key: "bar", text: "Bar" }));
                chartTypes.addItem(new sap.ui.core.Item({ key: "line", text: "Line" }));
                chartTypes.addItem(new sap.ui.core.Item({ key: "column", text: "Column" }));
                break;
        }

        // switch (question.type) {
        //     case "MultipleChoice":
        //     case "SingleChoice":
        //     case "NPS":
        //         chartTypes.addItem(new sap.ui.core.Item({ key: "pie", text: "Pie" }));
        //         break;

        //     default:
        //         break;
        // }

        toolbar.addContent(chartTypes);

        // if (question.type === "Likert" || question.type === "NPS") {
        //     const chartCalc = new sap.m.Select({
        //         width: "150px",
        //         selectedKey: "{/chartCalc" + question.id + "}",
        //         change: function (oEvent) {
        //             formResponse.buildReport();
        //         },
        //     });

        //     chartCalc.addItem(new sap.ui.core.Item({ key: "count", text: "Count" }));
        //     chartCalc.addItem(new sap.ui.core.Item({ key: "average", text: "Average" }));
        //     toolbar.addContent(chartCalc);
        // }

        parent.addItem(toolbar);
    },

    buildReportNPS: function (question, parent) {
        const response = formResponse.response[question.id];
        if (!response) return;

        // Default Settings
        if (!modelpanResponse.oData["chartType" + question.id]) {
            modelpanResponse.oData["chartType" + question.id] = "bar";
        }

        const chartparent = new sap.m.Panel({ height: "500px" });
        parent.addItem(chartparent);

        // Chart Data
        let enableLegend = true;
        let series = [];

        const resGroupsItems = Object.keys(response.group);

        resGroupsItems.forEach(function (keyGroup) {
            const groupData = response.group[keyGroup];
            const group = ModelData.FindFirst(modelMasterData.oData.groups, "id", keyGroup);

            let itemValues = [];
            let totValue = 0;

            groupData.total.forEach(function (value) {
                totValue += value;
            });

            itemValues.push(parseFloat((totValue / groupData.responseCount).toFixed(2)));

            let seriesData = {
                name: group.name,
                data: itemValues,
            };

            if (modelpanResponse.oData["chartPolar" + question.id]) {
                seriesData.pointPlacement = "on";
            }

            if (group.setup.color) seriesData.color = group.setup.color;

            series.push(seriesData);
        });

        chartparent.onAfterRendering = function () {
            let options = {
                credits: false,
                chart: {
                    style: { fontFamily: "72", fontSize: "12px" },
                    backgroundColor: "transparent",
                    type: modelpanResponse.oData["chartType" + question.id],
                    polar: modelpanResponse.oData["chartPolar" + question.id],
                },
                title: { text: null },
                yAxis: {
                    title: { text: null },
                    labels: { enabled: true },
                },
                xAxis: {
                    title: { text: null },
                    labels: { enabled: true },
                    categories: [question.title],
                },
                legend: {
                    enabled: enableLegend,
                    backgroundColor: "transparent",
                    itemStyle: { fontSize: "12px", fontWeight: "Normal" },
                    align: "center",
                    verticalAlign: "bottom",
                },
                series: series,
            };

            if (modelpanResponse.oData["chartPolar" + question.id]) {
                options.yAxis.gridLineInterpolation = "polygon";
                options.yAxis.lineWidth = 0;
                options.yAxis.min = 0;
                options.xAxis.lineWidth = 0;
                options.xAxis.tickmarkPlacement = "on";
            }

            Highcharts.chart(chartparent.getDomRef(), options);
        };
    },

    buildReportChoice: function (question, parent) {
        return;
        const response = formResponse.response[question.id];
        if (!response || !response.items) return;

        // Default Settings
        if (!modelpanResponse.oData["chartType" + question.id]) {
            modelpanResponse.oData["chartType" + question.id] = "bar";
        }

        const chartparent = new sap.m.Panel({ height: "500px" });
        parent.addItem(chartparent);

        // Chart Data
        let enableLegend = true;
        let categories = [];
        let series = [];
        let data = [];

        switch (modelpanResponse.oData["chartType" + question.id]) {
            case "pie":
                question.items.forEach(function (item) {
                    data.push({
                        name: item.title,
                        y: response.count[item.value],
                    });
                });

                series.push({
                    name: question.title,
                    data: data,
                });

                break;

            default:
                let seriesData = {};

                question.items.forEach(function (item) {
                    data.push(response.count[item.value]);
                });

                seriesData.data = data;

                if (modelpanResponse.oData["chartPolar" + question.id]) {
                    seriesData.pointPlacement = "on";
                }

                series.push(seriesData);
                enableLegend = false;
                break;
        }

        question.items.forEach(function (item) {
            categories.push(item.title);
        });

        chartparent.onAfterRendering = function () {
            let options = {
                credits: false,
                chart: {
                    style: { fontFamily: "72", fontSize: "12px" },
                    backgroundColor: "transparent",
                    type: modelpanResponse.oData["chartType" + question.id],
                    polar: modelpanResponse.oData["chartPolar" + question.id],
                },
                title: { text: null },
                tooltip: {
                    formatter: function () {
                        const key = this.x ? this.x : this.key;
                        return "Counter for <b>" + key + "</b> : <b>" + this.y + "</b>";
                    },
                },
                yAxis: {
                    title: { text: null },
                    labels: { enabled: true },
                },
                xAxis: {
                    title: { text: null },
                    labels: { enabled: true },
                    categories: categories,
                },
                legend: {
                    enabled: enableLegend,
                    backgroundColor: "transparent",
                    itemStyle: { fontSize: "12px", fontWeight: "Normal" },
                    align: "center",
                    verticalAlign: "bottom",
                },
                series: series,
            };

            if (modelpanResponse.oData["chartPolar" + question.id]) {
                options.yAxis.gridLineInterpolation = "polygon";
                options.yAxis.lineWidth = 0;
                options.yAxis.min = 0;
                options.xAxis.lineWidth = 0;
                options.xAxis.tickmarkPlacement = "on";
            }

            Highcharts.chart(chartparent.getDomRef(), options);
        };
    },

    buildReportLikert: function (question, parent) {
        const response = formResponse.response[question.id];
        if (!response) return;

        // Default Settings
        if (!modelpanResponse.oData["chartType" + question.id]) {
            modelpanResponse.oData["chartType" + question.id] = "column";
        }

        const chartparent = new sap.m.Panel({ height: "500px" });
        parent.addItem(chartparent);

        // Chart Data
        let series = [];
        let categories = [];

        const resGroupsItems = Object.keys(response.group);

        resGroupsItems.forEach(function (keyGroup) {
            const groupData = response.group[keyGroup];
            const resItems = Object.keys(groupData.items);
            const group = ModelData.FindFirst(modelMasterData.oData.groups, "id", keyGroup);

            let itemValues = [];

            resItems.forEach(function (keyItem) {
                const itemData = groupData.items[keyItem];
                let totValue = 0;
                itemData.total.forEach(function (value) {
                    totValue += value;
                });
                itemValues.push(parseFloat((totValue / itemData.responseCount).toFixed(2)));
                categories.push(itemData.title);
            });

            let seriesData = {
                name: group.name,
                data: itemValues,
            };

            if (modelpanResponse.oData["chartPolar" + question.id]) {
                seriesData.pointPlacement = "on";
            }

            if (group.setup.color) seriesData.color = group.setup.color;

            series.push(seriesData);
        });

        chartparent.onAfterRendering = function () {
            let options = {
                credits: false,
                chart: {
                    style: { fontFamily: "72", fontSize: "12px" },
                    backgroundColor: "transparent",
                    type: modelpanResponse.oData["chartType" + question.id],
                    polar: modelpanResponse.oData["chartPolar" + question.id],
                },
                title: { text: null },
                yAxis: {
                    title: { text: null },
                    labels: { enabled: true },
                    // tickInterval:1
                },
                xAxis: {
                    title: { text: null },
                    labels: { enabled: true },
                    categories: categories,
                    // tickInterval: 1
                },
                legend: {
                    backgroundColor: "transparent",
                    itemStyle: { fontSize: "12px", fontWeight: "Normal" },
                    align: "center",
                    verticalAlign: "bottom",
                },
                series,
            };

            if (modelpanResponse.oData["chartPolar" + question.id]) {
                formResponse.setChartPolarProps(options);
            }

            Highcharts.chart(chartparent.getDomRef(), options);
        };
    },

    setChartPolarProps: function (options) {
        options.yAxis.gridLineInterpolation = "polygon";
        options.yAxis.lineWidth = 0;
        options.yAxis.min = 0;
        options.xAxis.lineWidth = 0;
        options.xAxis.tickmarkPlacement = "on";

        return options;
    },

    buildReportText: function (question, parent) {
        const response = formResponse.response[question.id];
        if (!response) return;

        const tableText = new sap.m.Table({
            alternateRowColors: true,
            growing: true,
            growingThreshold: 10,
        });

        tableText.addColumn(new sap.m.Column());
        tableText.addColumn(new sap.m.Column());

        const columnText = new sap.m.ColumnListItem();

        columnText.addCell(
            new nep.bootstrap.Text({
                text: "{group}",
                fontSize: "FontSize6",
                textColor: "Muted",
            })
        );

        columnText.addCell(
            new nep.bootstrap.Text({
                text: "{text}",
                fontSize: "FontSize6",
                textColor: "Muted",
            })
        );

        var modelTableText = new sap.ui.model.json.JSONModel();
        tableText.setModel(modelTableText);

        tableText.bindAggregation("items", {
            path: "/",
            template: columnText,
            templateShareable: false,
        });

        let answers = [];

        const resGroupsItems = Object.keys(response.group);

        resGroupsItems.forEach(function (keyGroup) {
            const groupData = response.group[keyGroup];
            const group = ModelData.FindFirst(modelMasterData.oData.groups, "id", keyGroup);

            groupData.answer.forEach(function (answer) {
                answers.push({ text: answer, group: group.name });
            });
        });

        modelTableText.setData(answers);
        modelTableText.refresh();

        parent.addItem(tableText);
    },

    flatten: function (response) {
        const resQuestions = Object.keys(response.response);

        resQuestions.forEach(function (keyQuestion) {
            let count = [];
            let total = [];
            const resData = response.response[keyQuestion];
            if (!resData) return;

            const question = ModelData.FindFirst(
                modelSurveyData.oData.questions,
                "id",
                keyQuestion
            );

            if (!formResponse.response[question.id]) {
                formResponse.response[question.id] = {
                    id: question.id,
                    title: question.title,
                    type: question.type,
                    group: {},
                    responseCount: 0,
                };
            }

            if (!formResponse.response[question.id].group[response.groupid]) {
                if (
                    question.items &&
                    (question.type === "SingleChoice" || question.type === "MultipleChoice")
                ) {
                    count = {};
                    question.items.forEach(function (item) {
                        count[item.value] = 0;
                        total[item.value] = 0;
                    });
                }

                if (question.type === "NPS") {
                    count = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                    total = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                }

                formResponse.response[question.id].group[response.groupid] = {
                    items: [],
                    answer: [],
                    count: count,
                    total: total,
                    responseCount: 0,
                };
            }

            formResponse.response[question.id].responseCount++;

            switch (question.type) {
                case "Likert":
                    var resItems = Object.keys(resData);

                    resItems.forEach(function (keyItem) {
                        const resItem = resData[keyItem];
                        const item = ModelData.FindFirst(question.items, "id", keyItem);

                        if (
                            !formResponse.response[question.id].group[response.groupid].items[
                                item.id
                            ]
                        ) {
                            formResponse.response[question.id].group[response.groupid].items[
                                item.id
                            ] = {
                                id: item.id,
                                title: item.title,
                                responseCount: 0,
                                count: [0, 0, 0, 0, 0],
                                total: [0, 0, 0, 0, 0],
                            };
                        }

                        formResponse
                            .response[question.id].group[response.groupid].items[item.id].responseCount++;
                        formResponse
                            .response[question.id].group[response.groupid].items[item.id].count[resItem - 1]++;
                        formResponse.response[question.id].group[response.groupid].items[
                            item.id
                        ].total[resItem - 1] += resItem;
                    });
                    break;

                case "MultipleChoice":
                    var resItems = Object.keys(resData);

                    formResponse.response[question.id].group[response.groupid].responseCount++;

                    resItems.forEach(function (keyItem) {
                        const resItem = resData[keyItem];
                        formResponse.response[question.id].group[response.groupid].count[resItem]++;
                        formResponse.response[question.id].group[response.groupid].total[
                            resItem
                        ] += parseInt(resItem);
                    });
                    break;

                case "SingleChoice":
                    formResponse.response[question.id].group[response.groupid].responseCount++;
                    formResponse.response[question.id].group[response.groupid].count[resData]++;
                    formResponse.response[question.id].group[response.groupid].total[
                        resData
                    ] += parseInt(resData);
                    break;

                case "NPS":
                    formResponse.response[question.id].group[response.groupid].responseCount++;
                    formResponse.response[question.id].group[response.groupid].count[resData]++;
                    formResponse.response[question.id].group[response.groupid].total[
                        resData
                    ] += parseInt(resData);
                    break;

                default:
                    if (resData) {
                        formResponse.response[question.id].group[response.groupid].responseCount++;
                        formResponse.response[question.id].group[response.groupid].answer.push(
                            resData
                        );
                    }
                    break;
            }
        });
    },
};
